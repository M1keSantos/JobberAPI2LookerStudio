Script Name	Description
fetchInvoices.js	Fetches invoices data from Jobber API
fetchClients.js	Fetches clients and their properties
fetchQuotes.js	Fetches quote data
fetchJobs.js	Retrieves job-related data
fetchSchedules.js	Fetches scheduling data
fetchRequests.js	Retrieves service request details
tokenManagement.js	Handles token refresh and storage

ðŸ“Œ Automation Setup
Use automation/scheduleTriggers.js to schedule API requests.
Look at docs/Automation.md for more details.

ðŸ“Œ License
This project is licensed under the MIT License.


---

### **ðŸ“Œ Sample Scripts**
#### **`scripts/fetchInvoices.js`**
```javascript
const fetch = require("node-fetch");
const { getStoredAccessToken } = require("./tokenManagement");

async function fetchInvoices() {
    const url = "https://api.getjobber.com/api/graphql";
    const accessToken = getStoredAccessToken();

    if (!accessToken) {
        console.log("No access token found. Refresh the token.");
        return;
    }

    const query = {
        query: `query FetchInvoices { invoices(first: 10) { nodes { id, invoiceNumber, total } } }`
    };

    const response = await fetch(url, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${accessToken}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify(query)
    });

    const data = await response.json();
    console.log("Fetched Invoices:", data);
}

fetchInvoices();



============================================================================================




scripts/tokenManagement.js
const fs = require("fs");
const fetch = require("node-fetch");
const credentials = require("../config/credentials.json");

async function refreshAccessToken() {
    const url = "https://api.getjobber.com/api/oauth/token";

    const payload = new URLSearchParams({
        client_id: credentials.client_id,
        client_secret: credentials.client_secret,
        grant_type: "refresh_token",
        refresh_token: credentials.refresh_token
    });

    const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: payload
    });

    const data = await response.json();

    if (data.access_token) {
        credentials.access_token = data.access_token;
        credentials.refresh_token = data.refresh_token;
        fs.writeFileSync("../config/credentials.json", JSON.stringify(credentials, null, 2));
        console.log("Token refreshed successfully.");
    } else {
        console.error("Error refreshing token:", data);
    }
}

module.exports = { refreshAccessToken, getStoredAccessToken: () => credentials.access_token };


